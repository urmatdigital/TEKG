import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, Context, session } from 'telegraf';
import { UserService } from './user.service';
import * as jwt from 'jsonwebtoken';

interface SessionData {
  referralCode?: string;
}

interface MyContext extends Context {
  session?: SessionData;
}

@Injectable()
export class TelegramService {
  private bot: Telegraf<MyContext>;
  private readonly webhookPath = '/telegram-webhook';
  private readonly referralPrefix = 'ref_';

  constructor(
    private readonly configService: ConfigService,
    private readonly userService: UserService,
  ) {}

  async start() {
    console.log('[TelegramService] Initializing...');
    const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    if (!token) {
      throw new Error('TELEGRAM_BOT_TOKEN is not defined in environment variables');
    }

    console.log('[TelegramService] Creating Telegraf instance...');
    this.bot = new Telegraf<MyContext>(token);

    // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è —Å–µ—Å—Å–∏–π
    this.bot.use(session());

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    const webhookUrl = this.configService.get<string>('TELEGRAM_WEBHOOK_URL');
    if (webhookUrl) {
      await this.bot.telegram.setWebhook(`${webhookUrl}${this.webhookPath}`);
    }

    this.setupHandlers();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await this.bot.launch();
    console.log('[TelegramService] Bot started successfully');
  }

  getWebhookCallback() {
    return this.bot.webhookCallback(this.webhookPath);
  }

  private setupHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.command('start', async (ctx) => {
      const startPayload = ctx.message.text.split(' ')[1];
      if (startPayload?.startsWith(this.referralPrefix)) {
        const referralCode = startPayload.replace(this.referralPrefix, '');
        ctx.session = { referralCode };
      }

      const telegramId = ctx.from.id.toString();
      const user = await this.userService.findByTelegramId(telegramId);

      if (user) {
        await ctx.reply(
          '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞:',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üîë –í–æ–π—Ç–∏',
                    url: `https://te.kg/auth/telegram?id=${telegramId}`
                  }
                ]
              ]
            }
          }
        );
        return;
      }

      await ctx.reply(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tulpar Express! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:',
        {
          reply_markup: {
            keyboard: [
              [
                {
                  text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
                  request_contact: true
                }
              ]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
          }
        }
      );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    this.bot.on('contact', async (ctx) => {
      if (ctx.message.contact.user_id !== ctx.from.id) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç');
        return;
      }

      const telegramId = ctx.from.id.toString();
      const phone = ctx.message.contact.phone_number;

      try {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const referredByUser = ctx.session?.referralCode ? 
          await this.userService.findByReferralCode(ctx.session.referralCode) : 
          null;

        const user = await this.userService.upsertUser({
          telegram_id: telegramId,
          telegram_username: ctx.from.username,
          telegram_first_name: ctx.from.first_name,
          telegram_last_name: ctx.from.last_name,
          phone: phone,
          referred_by: referredByUser?.id
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—Ö–æ–¥–∞
        await ctx.reply(
          '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏:',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üîë –í–æ–π—Ç–∏',
                    url: `https://te.kg/auth/telegram?id=${telegramId}`
                  }
                ]
              ],
              remove_keyboard: true
            }
          }
        );
      } catch (error) {
        console.error('Error processing contact:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });
  }

  async stop() {
    if (this.bot) {
      await this.bot.stop();
    }
  }

  async sendMessage(chatId: string, message: string) {
    try {
      await this.bot.telegram.sendMessage(chatId, message);
      return true;
    } catch (error) {
      console.error('Error sending message:', error);
      return false;
    }
  }
}
